/*******************************************************************
 * Copyright (C) 2003 R. Alblas 
 *
 * This is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation.
 * 
 ********************************************************************/
/*******************************************************************
 * Header file for XRIT functions
 ********************************************************************/
#ifndef VCDU_HEADER
#define VCDU_HEADER
#ifdef __NOGUI__
  #include "xrit2pic_nogtk.h"
#else
  #include "gtk/gtk.h"
#endif
#undef MAX
#define MAX(a,b) ((a)>(b)? (a) : (b))
#undef MIN
#define MIN(a,b) ((a)<(b)? (a) : (b))

#include <time.h>

/* Data types; STDFRM=jpeg from MSG Data Manager */
typedef enum { UNKDTYPE='U',EXRIT='E',NXRIT='N',
                            JMALRIT='J',STDFRMT='T',
                            NHRPT='A',METOP='M',MHRPT='m',
                            DWDSAT='D',BUFR='B'} DATATYPE;

typedef struct buf
{
  unsigned char *l;
  int n;
} BUF;

typedef struct cvcdu_hdr
{
  int version_nr;
  int sc_id;
  int vc_id;
  int counter;
  int replay;
} CVCDU_HDR;

typedef struct cppdu_hdr
{
  int version_nr;
  int type;
  int secundaryhdr_flg;
  int apid;
  int sequence_flg;
  int packetseq_counter;
  int packet_length;
} CPPDU_HDR;

typedef struct tfh_hdr
{
  int file_counter;
  unsigned long bitlen_lsb;
  unsigned long bitlen_msb;
  unsigned long bytelen_lsb;
  unsigned long bytelen_msb;

} TFH_HDR;

typedef struct xrit_hdr
{
  int hdr_type;       // 0='prim. hdr', 1='image' etc.
  int hdr_rec_len;
  int file_type;
  long hdr_len;
  long data_len;
  long datalen_msb;
  long datalen_lsb;

  int nb,nc,nl,cf;
  char image_iformat;  /* 'j' or 'w' */
  char image_oformat;  /* 'j' or 'w' */

  char proj_name[35];
  gint32 cfac,lfac,coff,loff;
  float sub_lon;

/*Anno and extracted contents */
  char anno[100];
  char hl;            /* hrit/lrit */
  char vers[10];      /* 000 */
  char sat[10];       /* MSG1, MTP (disseminating sat) */
  DATATYPE xrit_frmt; /* code for format XRIT headers: 'E', 'N' */
  char src[20];       /* MSG*, SERVICE, GOES,  ... */
  char satsrc[20];    /* MSG*, Srvc, Frgn */
  int satpos;         /* pos sat above euator */
  int wavel;          /* wavelength channel */
  int scan_dir;       /* 'n', 's' */
  char chan[20];      /* VIS006, ADMIN, .... */
  int chan_nr;        /* coding chan into number (1, 2, ...) */
  char special;       /* p(ro), e(pi) */
  int segment;        /* segment number */
  char itime[20];     /* time: year/date/hourmin */
  char compr;         /* flag compressed */
  char encry;         /* flag encrypted */
  int lines_per_sec;        // for polar sats

  char sortn[20];
  char id[40];
  struct tm time;     /* (start)time */
  struct tm etime;    /* endtime */
  int tlen;           /* length in seconds */
  
  char ccsds[7];
  int gp_sc_id;
  int spec_ch_id;
  int seq_no,seq_start,seq_end;
  int dt_f_rep;
  char mdm_pos_code[4]; /* position HRV generated by MDM */
  char *img_obs_time;   /* JMA Image Observation Time */
  guint32 pic_id;
  gboolean done;
} XRIT_HDR;



#endif
