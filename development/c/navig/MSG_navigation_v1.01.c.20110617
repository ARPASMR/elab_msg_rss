
/*************************************************************************
* Introduction:
* =============
* The Program "MSG_navigation.c" is an example code provided to give
* the users guidance for a possible implementation of the equations
* given in the LRIT/HRIT Global Specification [1] to navigate MSG
* (METEOSAT 8 onwards) data, i.e. to link the pixel coordinates column
* and line to the corresponding geographical coordinates latitude and
* longitude.
*
* Users should take note, however, that it does NOT provide software
* for reading MSG data either in LRIT/HRIT, in native or any other
* format and that EUMETSAT cannot guarantee the accuracy of this
* software. The software is for use with MSG data only and will not
* work in the given implementation for Meteosat first generation data.
* 
* Two functions/subroutines are provided:
*   pixcoord2geocoord: for conversion of column/line into lat./long.
*   geocoord2pixcoord: for conversion of lat./long. into column/line
* 
* The main routine gives an example how to utilize these two functions by
* reading a value for column and line at the start of the program on the
* command line and convert these values into the corresponding
* geographical coordinates and back again. The results are then printed
* out on the screen.
*
* To Compile the program use for example:
*
* COMMAND PROMPT: gcc MSG_navigation.c -o MSG_navigation -lm
* 
* Run the program by typing 
* 
* COMMAND PROMPT: ./MSG_navigation <COLUMS> <ROWS>
* 
* ----------------------------------------------------------------------
* 
* NOTE: Please be aware, that the program assumes the MSG image is
* ordered in the operational scanning direction which means from south
* to north and from east to west. With that the VIS/IR channels contains
* of 3712 x 3712 pixels, start to count on the most southern line and the
* most eastern column with pixel number 1,1.
*
*
* NOTE on CFAC/LFAC and COFF/LOFF:
* The parameters CFAC/LFAC and COFF/LOFF are the scaling coefficients
* provided by the navigation record of the LRIT/HRIT header and used
* by the scaling function given in Ref [1], page 28.
*
* COFF/LOFF are the offsets for column and line which are basically 1856
* and 1856 for the VIS/IR channels and refer to the middle of the image 
* (centre pixel). The values regarding the High Resolution Visible Channel 
* (HRVis) will be made available in a later issue of this software.
*
* CFAC/LFAC are responsible for the image "spread" in the NS and EW
* directions. They are calculated as follows:
* CFAC = LFAC = 2^16 / delta
* with
* delta = 83.84333 micro Radian (size of one VIS/IR MSG pixel)
* 
* CFAC     = LFAC     =  781648343.404  rad^-1 for VIS/IR
*
* which should be rounded to the nearest integer as stated in Ref [1].
* 
* CFAC     = LFAC     =  781648343  rad^-1 for VIS/IR
*
* the sign of CFAC/LFAC gives the orientation of the image.
* Negative sign give data scanned from south to north as in the
* operational scanning. Positive sign vice versa.
*
* The terms "line" and "row" are used interchangeable.
*
* PLEASE NOTE that the values of CFAC/LFAC which are given in the
* Header of the LRIT/HRIT Level 1.5 Data (see [2]) are actually in 
* Degrees and should be converted in Radians for use with these 
* routines (see example and values above).
*
* The other parameters are given in Ref [1].
*
* Further information may be found in either Ref [1], Ref [2] or
*  Ref [3] or on the Eumetsat website http://www.eumetsat.int/ .
*
*  REFERENCE:                                            
*  [1] LRIT/HRIT Global Specification                     
*      (CGMS 03, Issue 2.6, 12.08.1999)                  
*      for the parameters used in the program.
*  [2] MSG Ground Segment LRIT/HRIT Mission Specific 
*      Implementation, EUMETSAT Document, 
*      (EUM/MSG/SPE/057, Issue 6, 21. June 2006).
*  [3] MSG Level 1.5 Image Data Format Description
*      (EUM/MSG/ICD/105, Issue v5A, 22. August 2007).
*
* Please email the User Service (via
* http://www.eumetsat.int/Home/Basic/Contact_Us/index.htm) if you have
* any questions regarding this software.
*
*
*
*
************************************************************************/


#include<stdio.h>
#include<string.h>
#include<stdlib.h>
#include<math.h>

/* parameters used in the routines as given in Ref. [1] */
const double  PI         =     3.14159265359;
const double  SAT_HEIGHT = 42164.0;     /* distance from Earth centre to satellite     */
const double  R_EQ       =  6378.169;   /* radius from Earth centre to equator         */
const double  R_POL      =  6356.5838;  /* radius from Earth centre to pol             */
const double  SUB_LON    =     0.0;     /* longitude of sub-satellite point in radiant */


const long    CFAC  =  -781648333;       /* scaling coefficients (see note above)       */
const long    LFAC  =  -781648333;      /* scaling coefficients (see note above)       */
//const long    COFF  =        1856;       /* scaling coefficients (see note above)       */
//const long    LOFF  =        1856;       /* scaling coefficients (see note above)       */

const int NROW = 3712;
const int NCOL = 3712;

/* function prototypes */
int nint(double val);

int geocoord2pixcoord(double latitude, double longitude, int coff, int loff, float resx, float resy,  int 
*column, int *row);

/**************************************************************************
* 
* The following program gives an example how to utilize the
* functions "geocoord2pixcoord" and "pixcoord2geocoord"
*
***************************************************************************/

int main(int argc, char *argv[] ){
  
  int status=0;

  /* command line variables */
  char *co, *ro;
  
  int  row=0,  col=0;
  long column=0, line=0;
  long  coff=0, loff=0;
  signed long long cfac=0, lfac=0;
  int  c=0, l=0;

  double d_lat=0.0, d_lon=0.0;
  double lat=0.0, lon=0.0;

  double lonmin,lonmax;
  double latmin,latmax;
  double res;

  char otfile[256];

  memset(otfile,0x0,256);

  /*  command line  */

  if ( argc != 9 ){
    fprintf( stderr, "\n   call of program %d\n", argc);
    fprintf( stderr, "   ./MSG_navigation <SAT> <CH> <LATMIN> <LATMAX>  <LONMIN> <LONMAX> <RES> <fraw> <fout>\n");
    fprintf( stderr, "   EXIT!\n\n");
    exit (-1);
  }
  
  latmin=atof(argv[2]);
  latmax=atof(argv[3]);
  
  lonmin=atof(argv[4]);
  lonmax=atof(argv[5]);
  
  res=atof(argv[6]);

  printf("lon min = %8.3f lon max = %8.3f\nlat min = %8.3f lat max = %8.3f\nres = %8.3f\n", lonmin, lonmax, latmin, latmax, res); 

  /* coeff for channel type */
  
  float resx, resy;
  long      COFF;
  long      LOFF;
  int NROW;
  int NCOL;

  int chtype=atoi(argv[1]);

  printf("Channel type = %d\n", chtype);

  switch (chtype) {

	case (1):

		resx  =        1.0;       /* scaling coefficients (see note above)       */
		resy  =        1.0;        /* scaling coefficients (see note above)       */
		COFF  =        1856;       /* scaling coefficients (see note above)       */
		LOFF  =        1856;       /* scaling coefficients (see note above)       */
		NROW = 3712;
		NCOL = 3712;

		break;

	case (2):

		resx  =        3.0;       /* scaling coefficients (see note above)       */
		resy  =        3.0;        /* scaling coefficients (see note above)       */
		COFF  =        5568;       /* scaling coefficients (see note above)       */
		LOFF  =        5568;       /* scaling coefficients (see note above)       */
		NROW = 11136;
		NCOL = 11136;

		break;

	default:
    		fprintf( stderr, "\n   erro in channel params %d instead of [1-2]\n", chtype);
    		fprintf( stderr, "   EXIT!\n\n");
    		exit (-1);

  }

  /* start working */
  
  coff=COFF;
  loff=LOFF;

  double i,j;

  int k;

  float msg;
 
  /* main loop */

  int ncol = (int) (((lonmax - lonmin) / res) + 1);
  int nrow = (int) (((latmax - latmin) / res) + 1);

  printf("ncol = %d\n", ncol);
  printf("nrow = %d\n", nrow);

  strcpy(otfile, argv[8]);

  FILE * fhdr = fopen(strcat(otfile,".hdr"),"w");

  fprintf(fhdr, "NCOLS        %d\n", ncol);
  fprintf(fhdr, "NROWS        %d\n", nrow);
  fprintf(fhdr, "XLLCORNER    %8.3f\n", lonmin);
  fprintf(fhdr, "YLLCORNER    %8.3f\n",latmin);
  fprintf(fhdr, "CELLSIZE     %8.3f\n", res);
  fprintf(fhdr, "NODATA_VALUE 1001.0\n");
  fprintf(fhdr, "BYTEORDER LSBFIRST\n");

  fclose(fhdr);

  FILE * fraw = fopen(argv[7],"rb");

  strcpy(otfile, argv[8]);

  FILE * fout = fopen(strcat(otfile,".flt"),"w");

  float tmp;

  tmp = -latmin;
  latmin = - latmax;
  latmax = tmp;

  tmp = -lonmin;
  lonmin = - lonmax;
  lonmax = tmp;

  for (i = 0;i < nrow; i++) { 
    for (j = 0;j < ncol;j++) {

	d_lon = (lonmax -  j * res);
	d_lat = (latmin +  i * res);

  	geocoord2pixcoord( d_lat, d_lon, coff, loff, resx, resy, &col, &row);

	k = col + NCOL * row;

	fseek(fraw, (k * sizeof(float)), SEEK_SET);

  	fread(&msg,sizeof(float), 1, fraw);

	fwrite(&msg,sizeof(float), 1,fout);
    
  /* print out results */
//  fprintf( stdout, " lat=  %17.13f       lon=  %17.13f       col=        %4d row=        %4d\n", d_lat, d_lon, col, row);

 	}

 }

  fclose(fraw);

  fclose(fout);

  return (0);

}


/**********************************************************
 * function geocoord2pixcoord                             *
 *                                                        *
 * PURPOSE:                                               *
 *   return the pixel column and line of an MSG image     *
 *   for a given pair of latitude/longitude.              *
 *   (based on the formulas given in Ref. [1])            *
 *                                                        *
 *                                                        *
 * DEPENDENCIES:                                          *
 *   up to now none                                       * 
 *                                                        *
 *                                                        *
 * REFERENCE:                                             *
 * [1] LRIT/HRIT Global Specification                     * 
 *     (CGMS 03, Issue 2.6, 12.08.1999)                   *
 *     for the parameters used in the program             *
 * [2] MSG Ground Segment LRIT/HRIT Mission Specific      *
 *     Implementation, EUMETSAT Document,                 *
 *     (EUM/MSG/SPE/057, Issue 6, 21. June 2006).         *
 *                                                        *
 *                                                        *
 * MODIFICATION HISTORY:                                  *
 *   Version 1.01                                         *
  *   (c) EUMETSAT 2005, 2009                             *
 *                                                        *
 *                                                        *
 * INPUT:                                                 *
 *   latitude  (double) geographic Latitude of a point    *
 *                      [Degrees]                         *
 *   longitude (double) geographic Longitude of a point   *
 *                      [Degrees]                         *
 *   coff (int)   coefficient of the scalling function    *
 *                (see page 28, Ref [1])                  *
 *   loff (int)   coefficient of the scalling function    *
 *                (see page 28, Ref [1])                  *
 *                                                        *
 *                                                        *
 * OUTPUT:                                                *
 *   row    (int) row-value of the wanted pixel           *
 *   column (int) column-value of the wanted pixel        *
 *                                                        *
 *********************************************************/

int geocoord2pixcoord(double latitude, double longitude, int coff, int loff, float  resx, float  resy, int *column, int *row){

  int ccc=0, lll=0;

  double lati=0.0, longi=0.0;
  double c_lat=0.0;
  double lat=0.0;
  double lon=0.0;
  double r1=0.0, r2=0.0, r3=0.0, rn=0.0, re=0.0, rl=0.0;
  double xx=0.0, yy=0.0;
  double cc=0.0, ll=0.0; 
  double dotprod=0.0;

  lati= latitude;
  longi= longitude;

  /* check if the values are sane, otherwise return error values */
  if (lati < -90.0 || lati > 90.0 || longi < -180.0 || longi > 180.0 ){ 
    *row = -999;
    *column = -999;
    return (-1);
  }


  /* convert them to radiants */
  lat = lati*PI / (double)180.;
  lon = longi *PI / (double)180.;
    
  /* calculate the geocentric latitude from the          */
  /* geograhpic one using equations on page 24, Ref. [1] */

  c_lat = atan ( ((double)0.993243*(sin(lat)/cos(lat)) ));
      

  /* using c_lat calculate the length form the Earth */
  /* centre to the surface of the Earth ellipsoid    */
  /* equations on page 23, Ref. [1]                  */
  
  re = R_POL / sqrt( ((double)1.0 - (double)0.00675701 * cos(c_lat) * cos(c_lat) ) );


  /* calculate the forward projection using equations on */
  /* page 24, Ref. [1]                                        */

  rl = re; 
  r1 = SAT_HEIGHT - rl * cos(c_lat) * cos(lon - SUB_LON);
  r2 = - rl *  cos(c_lat) * sin(lon - SUB_LON);
  r3 = rl * sin(c_lat);
  rn = sqrt( r1*r1 + r2*r2 +r3*r3 );
  
  
  /* check for visibility, whether the point on the Earth given by the */
  /* latitude/longitude pair is visible from the satellte or not. This */ 
  /* is given by the dot product between the vectors of:               */
  /* 1) the point to the spacecraft,			               */
  /* 2) the point to the centre of the Earth.			       */
  /* If the dot product is positive the point is visible otherwise it  */
  /* is invisible.						       */
     
  dotprod = r1*(rl * cos(c_lat) * cos(lon - SUB_LON)) - r2*r2 - r3*r3*(pow((R_EQ/R_POL),2));
     
  if (dotprod <= 0 ){
    *column = -999;
    *row = -999;
    return (-1);
  }
  

  /* the forward projection is x and y */

  xx = atan( (-r2/r1) );
  yy = asin( (-r3/rn) );


  /* convert to pixel column and row using the scaling functions on */
  /* page 28, Ref. [1]. And finding nearest integer value for them. */


  cc = coff + xx *  (pow(2,-16) * CFAC) * resx ;
  ll = loff + yy *  (pow(2,-16) * LFAC) * resy ;


  ccc=nint(cc);
  lll=nint(ll);		

  *column = ccc;
  *row = lll;

      
  return (0);

}



/* this function returns the nearest integer to the value val */
/* and is used in function geocoord2pixcoord */

int nint(double val){

  double a=0.0; /* integral  part of val */
  double b=0.0; /* frational part of val */

  b = modf(val,&a);
  
  if ( b > 0.5 ){
    val = ceil(val);
  } 
  else{
    val = floor(val);
  }

  return (int)val;

}

